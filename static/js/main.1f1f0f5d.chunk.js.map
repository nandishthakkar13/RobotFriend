{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CCCSC,EAhBF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAKxB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BF,EAA1B,YAAwCG,IAAI,UACpD,6BACI,4BAAKL,GACL,2BAAIC,MCKLK,EAfE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACzB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,MAAOQ,KAAMF,EAAOG,GAAGD,YCA9FG,G,MARG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,yBAAKV,UAAU,QACf,2BAAOA,UAAU,YAAYW,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,OCQ1EI,G,MAVA,SAACC,GAEZ,OACI,yBAAKC,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAmBC,OAAO,UAChEJ,EAAMK,YCiEAC,E,YAhEX,aAAc,IAAD,8BACT,+CAgCJC,eAAiB,SAACC,GAEd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SA9BzC,EAAKC,MAAO,CACRxB,OAAQ,GACRqB,YAAa,IAPR,E,iFAsBO,IAAD,OACfI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACpB,OAAO6B,S,+BAajC,IAAD,OAGMC,EAAiBC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAC,GAC5C,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS,EAAKX,MAAMH,YAAYa,kBAKpE,OAAgC,IAA7BH,KAAKP,MAAMxB,OAAOoC,OACV,wBAAIxC,UAAU,SAAd,cAIX,yBAAKA,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcyB,KAAKb,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUlB,OAAQ8B,U,GAzDhBO,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MACNC,SAASC,eAAe,SN2H5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.1f1f0f5d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id}) =>{\r\n    /*props = {name, email, id} As we destructure it right in the paramaters\r\n    we can use it directly in the code as name email instead of\r\n    doing props.name and props.email*/\r\n\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robot' />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n\r\n    \r\n    return(\r\n        <div >\r\n                { \r\n                robots.map((user,i) =>{\r\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} user={robots[i].user}/>\r\n    })\r\n    \r\n    }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.css';\r\nconst SearchBox = ({SearchChange}) =>{\r\n    return(\r\n        <div className='pa3 '>\r\n        <input className='searchbox' type='search' placeholder='search robots' onChange={SearchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\r\n    return(\r\n        <div style={{overflow:'scroll', border:'5px solid black', height:'800px'}}>\r\n       { props.children}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\nimport CardList from './CardList';\r\n/*import {robots} from './robots';*/\r\nimport SearchBox from './SearchBox';\r\nimport './App.css';\r\nimport Scroll from './Scroll';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super(); /*in order to use this keyword in the constructor you have to call super first */\r\n       \r\n        /*As our Application now has state that we might change based on our search box\r\n        we change to class based syntax so that we can use constructor */\r\n        this.state ={\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n        /*As this react in-built function we dont use arrow notation */\r\n        /*this function is executed in a sequence\r\n        \r\n        first constructor is executed\r\n        then render is executed\r\n        then componentDidMount is executed\r\n        and as we are changing the state in this function \r\n        render is executed again to display the new state */\r\n\r\n        /*here instead of using the robots.js file \r\n        we are using api to fetch the data*/\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n         .then(users => this.setState({robots:users}));\r\n    }\r\n\r\n    /*We use arrow function here because of the way we use this keyword here\r\n    As the event happens in the input element in the SearchBox the this keyword is bind to it\r\n    So using arrow function helps us to change where this points to\r\n    while using arrow function this points to where it is used in other terms in which function and where it is declared */\r\n\r\n    onSearchChange = (event) =>{\r\n        /*this updates the state this is react's way to change the state */\r\n        this.setState({searchfield: event.target.value})    \r\n    }\r\n\r\n    render(){\r\n            /*filters robots from the array based on what you search in the search box */\r\n            /*filter creates a new array based on what we search and passes to the cardlist */\r\n            const filteredRobots = this.state.robots.filter(robot =>{\r\n                return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            })\r\n\r\n            /*If the data coming from third party API is large and if it takes some time\r\n            then we can display an appopriate message to the user while they wait */\r\n            if(this.state.robots.length === 0){\r\n                return <h1 className='f1 tc'>Loading...</h1>\r\n            }\r\n            else{\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox SearchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots={filteredRobots}/> \r\n                </Scroll> \r\n            </div>\r\n        );\r\n            }\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(<App/>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}